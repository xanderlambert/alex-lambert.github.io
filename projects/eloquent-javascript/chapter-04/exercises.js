////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const  range = (x, y, inc) => {
  let rangeArray=[];
  if ( x === y ){
    return [];
  }
  if(inc > 0){
    for(var i =x; i <= y; i += inc){
      rangeArray.push(i);
    }
  }
  else if(inc < 0) {
    for(var i = x; i >= y; i += inc){
      rangeArray.push(i);
    }
  }
  else {
     for(var i = x; i <= y; i++){
      rangeArray.push(i);
    }    
  }
  return rangeArray;
}


////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
    //base
    let arr = array.length - 1;
    if (arr < 0) {
      return 0;
    }
    //recursion
    return array[arr] + sum(array.slice(0, arr));
};


////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  let rev = [];
  for(let i = arr.length - 1; i >= 0; i--){
      rev.push(arr[i]); 
  }
  return rev;
};

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array){
  var x = 0;
  for (var i =0; i < array.length/2; ++i){
      x = array[i];
      array[i] = array[array.length - (i+1)];
      array[array.length - ( i + 1 )] = x; 
  }
}
////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function arrayToList(array) {
  let rest = null;

  for (let i = array.length -1 ; i >= 0; i--) {
    rest = { value: array[i], rest: rest };
  }
  return rest;

  
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(listEx, output=[]) {
  //base
  if (listEx === null) {
    return output;
  }
  
  //recursion
  output.push(listEx.value);
  return listToArray(listEx.rest, output);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, rest) {
  return {value: value, rest: rest};
}


////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if(n < 0) {
    return undefined;
  }
  if(n === 0)
    return list.value;
  else
    return nth(list.rest, n - 1);
}



////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
